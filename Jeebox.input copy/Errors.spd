

// put all the message-specific stuff in here, in case I want to remove
// jeebox from the library? To compile without jeebox. Maybe?

extend ErrorReceiver {
	function NewWarning (|Message| node=nil, |String|Desc=nil) {
		require (.CanAddMore)
		cpp_part NewWarn

		|| err		  = Error(node)
		err.Description	= Desc
		err.IsWarning   = true
		
		self ~ err
	}


	function NewError (|Message| node=nil, |string| Desc=nil) {
		require (.CanAddMore)
		cpp_part NewItemWithNode

		|| err		  = Error(node)
		err.Description	= Desc
		
		self ~ err
	}
}


extend Error {
	constructor (|message| node) { 
		|| P = -1
		if (node) {P = node.position}
		.position = p
		.source = node
		.path = node.OriginalParsePath
		.OriginalData = node.OriginalParseData
	}
}

function Message.OriginalParsePath (|string|) { opt norefcounts
	|| L = .OriginalParseLayer
	if (L and L.obj isa string) {
		return L.obj|string|
	}
}

function Message.OriginalParseLayer (|memorylayer|) { opt norefcounts
	require self
	|| L = .memorylayer
	if (L and L!=(Message).defaultlayer) {
		return L
	}
}

function Message.OriginalParseData (|string|) { opt norefcounts
	|| L = .OriginalParseLayer
	if (L and L.obj2 isa string) {
		return L.obj2|string|
	} 
}


	
	
extend_module Error {
	function CantParseNum (|Message| Where, |string|num, |int| Pos) {
		visible // for lib
		|| err = error(where)
		err.Description = "Canâ€™t parse number '${num[0,10]}' (found '${num[pos]}')." // in case it's superlong
		stderr ~ err // we are done.
	}
}

