
/*
	Jeebox internals. By Theodore H. Smith...
*/





function BinaryEscapeTest (|string| AllBytes) {
	|| fs = FastString.new
	|| a = "they know what they've done"
	for (10) {
		a.EncodeBinary(fs)
		|| result = fs.GetResult
		|| b = result.DecodeBinary
		expect (a==b) "binary escaper different! a: $a b: $b"
		a = a + "z" + a
	}
		
	fs.appendhexdata(allbytes)
	|| Hexed = fs.getresult // hexed version of our data.
	fs ~ ('\0', 256)
	|| Str2 = fs.getresult  // whatever, this will do.
	hexed.UnHexRaw( Str2.addr, str2.length)
	
	expect Str2 == AllBytes
}


extend string {
	render EncodeBinary {
		cpp_wrapper JB_Str_EncodeB64
	}
	
	render DecodeBinary {
		cpp_wrapper JB_Str_DecodeB64
	}
	
	function AppendAsBinary (|faststring|fs) {
		fs ~ "#("
		.encodebinary(fs)
		fs ~ ")#"
	}
}


extend Message {
	syx Bin (Binary) {
		.name.appendasbinary(fs)
	}
}


function Parser.fBinary (ParseHandler) {
	// x  =  #( lkjs0293iklsd )#
	|| End = parser.data.find(")#", start+2)
	if (!End.found) {
		Return parser.ErrorAdd( "Binary section didn't close!" )
	}
	|| S = parser.data[Start+2, End]
	parser.nextstart = End + 2
	return parser.new(nil, @bin, start, s.DecodeBinary)
}



